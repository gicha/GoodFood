import 'dart:async';

import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes
// ignore_for_file: unnecessary_brace_in_string_interps

//WARNING: This file is automatically generated. DO NOT EDIT, all your changes would be lost.

typedef void LocaleChangeCallback(Locale locale);

class I18n implements WidgetsLocalizations {
  const I18n();
  static Locale _locale;
  static bool _shouldReload = false;

  static set locale(Locale _newLocale) {
    _shouldReload = true;
    I18n._locale = _newLocale;
  }

  static const GeneratedLocalizationsDelegate delegate =
    const GeneratedLocalizationsDelegate();

  /// function to be invoked when changing the language
  static LocaleChangeCallback onLocaleChanged;

  static I18n of(BuildContext context) =>
    Localizations.of<I18n>(context, WidgetsLocalizations);

  @override
  TextDirection get textDirection => TextDirection.ltr;

  /// "Подождите, идёт загрузка..."
  String get loading => "Подождите, идёт загрузка...";
  /// "Goodfood"
  String get title => "Goodfood";
  /// "Название отсутствует"
  String get noTitle => "Название отсутствует";
  /// "Описание отсутствует"
  String get noDesc => "Описание отсутствует";
  /// "Местоположение не установлено"
  String get noLocation => "Местоположение не установлено";
  /// "Подождите, мы определяем ваше местоположение"
  String get findLocation => "Подождите, мы определяем ваше местоположение";
  /// "Для корректной работы, приложению нужен доступ к вашей геопозиции"
  String get needLocation => "Для корректной работы, приложению нужен доступ к вашей геопозиции";
  /// "Подтвердить"
  String get confirm => "Подтвердить";
  /// "Отменить"
  String get cancel => "Отменить";
  /// "Построить ближайший маршрут через контейнер?"
  String get toNearestStore => "Построить ближайший маршрут через контейнер?";
  /// "Контейнер не выбран"
  String get noStore => "Контейнер не выбран";
  /// "Ближайший контейнер #${name}"
  String nearestStore(String name) => "Ближайший контейнер #${name}";
  /// "Неправильный email или пароль"
  String get wrongLoginOrPassword => "Неправильный email или пароль";
  /// "История"
  String get history => "История";
  /// "Email"
  String get mail => "Email";
  /// "Пароль"
  String get password => "Пароль";
  /// "Повторите пароль"
  String get rePassword => "Повторите пароль";
  /// "Пароли не совпадают"
  String get passwordDoesntMatch => "Пароли не совпадают";
  /// "Имя"
  String get name => "Имя";
  /// "Фамилия"
  String get surname => "Фамилия";
  /// "Войти"
  String get entry => "Войти";
  /// "Регистрация"
  String get registration => "Регистрация";
  /// "Считать QR"
  String get readQR => "Считать QR";
  /// "Обратная связь"
  String get feedback => "Обратная связь";
  /// "Нет аккаунта? "
  String get notHaveAccount => "Нет аккаунта? ";
  /// "Есть аккаунт? "
  String get haveAccount => "Есть аккаунт? ";
  /// "Вход по логину"
  String get entranceWithLogin => "Вход по логину";
  /// "Отсутствует подключение к интернету. Проверьте соединение"
  String get networkError => "Отсутствует подключение к интернету. Проверьте соединение";
  /// "Отправить"
  String get send => "Отправить";
  /// "Фильтр"
  String get filter => "Фильтр";
  /// "Опишите вашу проблему"
  String get describeYourProblem => "Опишите вашу проблему";
  /// "Сообщить о проблеме"
  String get reportProblem => "Сообщить о проблеме";
  /// "закрыть"
  String get close => "закрыть";
  /// "от вас"
  String get fromYou => "от вас";
  /// "м"
  String get metres => "м";
  /// "км"
  String get kilometres => "км";
  /// "Заказы"
  String get orders => "Заказы";
  /// "Заказов пока нет"
  String get withoutOrders => "Заказов пока нет";
  /// "Список пожеланий"
  String get wishlist => "Список пожеланий";
  /// "Пока что ваш\nсписок пуст\n:("
  String get withoutWishes => "Пока что ваш\nсписок пуст\n:(";
  /// "Удалить"
  String get delete => "Удалить";
  /// "сохранить"
  String get save => "сохранить";
  /// "Вернуться без сохранения изменений?"
  String get leaveWithoutSave => "Вернуться без сохранения изменений?";
  /// "Здесь вы можете заполнить\nсвой список желаний\n:)"
  String get addWish => "Здесь вы можете заполнить\nсвой список желаний\n:)";
}

class _I18n_ru_RU extends I18n {
  const _I18n_ru_RU();

  @override
  TextDirection get textDirection => TextDirection.ltr;
}

class _I18n_en_US extends I18n {
  const _I18n_en_US();

  /// "Wait please, loading..."
  @override
  String get loading => "Wait please, loading...";
  /// "GoodFood"
  @override
  String get title => "GoodFood";
  /// "Title is undefined"
  @override
  String get noTitle => "Title is undefined";
  /// "Description is undefined"
  @override
  String get noDesc => "Description is undefined";
  /// "Location is undefined"
  @override
  String get noLocation => "Location is undefined";
  /// "Wait a few seconds, we're trying to get your location"
  @override
  String get findLocation => "Wait a few seconds, we're trying to get your location";
  /// "Turn on the location. This way an app will work best"
  @override
  String get needLocation => "Turn on the location. This way an app will work best";
  /// "Confirm"
  @override
  String get confirm => "Confirm";
  /// "Cancel"
  @override
  String get cancel => "Cancel";
  /// "Построить ближайший маршрут через контейнер?"
  @override
  String get toNearestStore => "Построить ближайший маршрут через контейнер?";
  /// "Wrong email or password"
  @override
  String get wrongLoginOrPassword => "Wrong email or password";
  /// "History"
  @override
  String get history => "History";
  /// "Email"
  @override
  String get mail => "Email";
  /// "Password"
  @override
  String get password => "Password";
  /// "Re-enter the password"
  @override
  String get rePassword => "Re-enter the password";
  /// "Passwords don't match"
  @override
  String get passwordDoesntMatch => "Passwords don't match";
  /// "Name"
  @override
  String get name => "Name";
  /// "Surname"
  @override
  String get surname => "Surname";
  /// "Login"
  @override
  String get entry => "Login";
  /// "Register"
  @override
  String get registration => "Register";
  /// "Read the QR"
  @override
  String get readQR => "Read the QR";
  /// "Feedback"
  @override
  String get feedback => "Feedback";
  /// "Don't have an account? "
  @override
  String get notHaveAccount => "Don't have an account? ";
  /// "Already have an account?"
  @override
  String get haveAccount => "Already have an account?";
  /// "Entrance with login"
  @override
  String get entranceWithLogin => "Entrance with login";
  /// "No connection to the Internet"
  @override
  String get networkError => "No connection to the Internet";
  /// "Send"
  @override
  String get send => "Send";
  /// "Filter"
  @override
  String get filter => "Filter";
  /// "Describe your problem"
  @override
  String get describeYourProblem => "Describe your problem";
  /// "Report a problem"
  @override
  String get reportProblem => "Report a problem";
  /// "close"
  @override
  String get close => "close";
  /// "from you"
  @override
  String get fromYou => "from you";
  /// "m"
  @override
  String get metres => "m";
  /// "km"
  @override
  String get kilometres => "km";
  /// "Orders"
  @override
  String get orders => "Orders";
  /// "Seems your cart\nis empty\n:("
  @override
  String get withoutOrders => "Seems your cart\nis empty\n:(";
  /// "Wishlist"
  @override
  String get wishlist => "Wishlist";
  /// "Nothing is added\nto your wishlist yet\n:("
  @override
  String get withoutWishes => "Nothing is added\nto your wishlist yet\n:(";
  /// "Delete"
  @override
  String get delete => "Delete";
  /// "save"
  @override
  String get save => "save";
  /// "Leave unsaved?"
  @override
  String get leaveWithoutSave => "Leave unsaved?";
  /// "Here you can add\n your wishlist\n:)"
  @override
  String get addWish => "Here you can add\n your wishlist\n:)";

  @override
  TextDirection get textDirection => TextDirection.ltr;
}

class GeneratedLocalizationsDelegate extends LocalizationsDelegate<WidgetsLocalizations> {
  const GeneratedLocalizationsDelegate();
  List<Locale> get supportedLocales {
    return const <Locale>[
      const Locale("ru", "RU"),
      const Locale("en", "US")
    ];
  }

  LocaleResolutionCallback resolution({Locale fallback}) {
    return (Locale locale, Iterable<Locale> supported) {
      if (this.isSupported(locale)) {
        return locale;
      }
      final Locale fallbackLocale = fallback ?? supported.first;
      return fallbackLocale;
    };
  }

  @override
  Future<WidgetsLocalizations> load(Locale _locale) {
    I18n._locale ??= _locale;
    I18n._shouldReload = false;
    final Locale locale = I18n._locale;
    final String lang = locale != null ? locale.toString() : "";
    final String languageCode = locale != null ? locale.languageCode : "";
    if ("ru_RU" == lang) {
      return new SynchronousFuture<WidgetsLocalizations>(const _I18n_ru_RU());
    }
    else if ("en_US" == lang) {
      return new SynchronousFuture<WidgetsLocalizations>(const _I18n_en_US());
    }
    else if ("ru" == languageCode) {
      return new SynchronousFuture<WidgetsLocalizations>(const _I18n_ru_RU());
    }
    else if ("en" == languageCode) {
      return new SynchronousFuture<WidgetsLocalizations>(const _I18n_en_US());
    }

    return new SynchronousFuture<WidgetsLocalizations>(const I18n());
  }

  @override
  bool isSupported(Locale locale) {
    for (var i = 0; i < supportedLocales.length && locale != null; i++) {
      final l = supportedLocales[i];
      if (l.languageCode == locale.languageCode) {
        return true;
      }
    }
    return false;
  }

  @override
  bool shouldReload(GeneratedLocalizationsDelegate old) => I18n._shouldReload;
}